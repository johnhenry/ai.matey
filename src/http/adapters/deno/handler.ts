/**
 * Deno Handler
 *
 * HTTP request handler for Deno that uses the core handler.
 *
 * @module
 */

import type { Bridge } from '../../../core/bridge.js';
import type { HTTPListenerOptions } from '../../types.js';
import { CoreHTTPHandler } from '../../core/handler.js';
import { DenoRequestAdapter, DenoResponseAdapter } from './adapter.js';

/**
 * Create Deno HTTP handler for handling AI chat requests
 *
 * @param bridge - Bridge instance
 * @param options - HTTP listener options
 * @returns Deno HTTP handler function
 *
 * @example
 * ```typescript
 * import { DenoHandler } from '@agentic/ai-matey/http/deno';
 *
 * const bridge = new Bridge(frontend, backend);
 *
 * // Create handler
 * const handler = DenoHandler(bridge, {
 *   cors: true,
 *   streaming: true,
 * });
 *
 * // Use with Deno.serve
 * Deno.serve({ port: 3000 }, handler);
 * ```
 */
export function DenoHandler(
  bridge: Bridge,
  options: HTTPListenerOptions = {}
): (request: Request, connInfo?: { remoteAddr?: { hostname?: string } }) => Promise<Response> {
  // Create core handler with all business logic
  const { cors, ...restOptions } = options;

  const coreHandler = new CoreHTTPHandler({
    bridge,
    cors: (cors === false || cors === undefined) ? undefined : (cors === true ? {} : cors),
    ...restOptions as any, // HTTPListenerOptions types are compatible with CoreHandlerOptions at runtime
  });

  // Return Deno HTTP handler
  return async (
    request: Request,
    connInfo?: { remoteAddr?: { hostname?: string } }
  ): Promise<Response> => {
    try {
      // Parse JSON body if present (but not for OPTIONS requests)
      const contentType = request.headers.get('content-type') || '';
      const method = request.method;
      let body = null;

      if (method !== 'OPTIONS' && contentType.includes('application/json')) {
        try {
          body = await request.json();
        } catch {
          // If JSON parsing fails, leave body as null
        }
      }

      // Create adapters
      const genericReq = new DenoRequestAdapter(request, connInfo);
      genericReq.setBody(body);

      const genericRes = new DenoResponseAdapter();

      // Handle request through core handler
      await coreHandler.handle(genericReq, genericRes);

      // Return the response generated by the adapter
      return genericRes.getResponse();
    } catch (error) {
      // Return error response
      console.error('Deno handler error:', error);
      return new Response(
        JSON.stringify({ error: 'Internal Server Error' }),
        {
          status: 500,
          headers: { 'Content-Type': 'application/json' },
        }
      );
    }
  };
}
